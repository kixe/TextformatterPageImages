<?php namespace ProcessWire;

/**
 * ProcessWire TextformatterPageImages 
 *
 * derivation of module TextformatterImageTags made by Diogo.
 * customized by kixe (Christoph Thelen) 2013
 * Licensed under GNU/GPL v3
 * 
 * for ProcessWire 2.x, 3.x
 * Copyright (C) 2013 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 * @version 2.1.0 2024-06-05
 * 
 * @since 1.0.2 basic class and wrapper configuration added 2015-09-03
 * @since 1.0.3 hookable function wrapper() added 2015-10-24
 * @since 1.0.6 fixed issue with checking for array/ single-item 2016-12-07
 * @since 1.0.7 modified html wrapper options, provide urls of resized variants 2019-09-25
 * @since 1.0.8 append \n (linebreak) in case of custom html wrapper to prevent conflicts with markdown e.g. <figure> inside <p> 2020-10-19
 * @since 1.0.9 strip tags from $alt property if found in $description 2020-10-19
 * @since 1.1.0 added option to configure custom widths according to your breakpoints 2020-10-19
 * @since 1.1.1 allow @ in class string 2020-10-21
 * @since 1.1.2 allow to include images from other pages, by providing page ID as 4th parameter 2021-04-21
 * @since 2.0.0 added support for extended Markdown syntax 2022-02-26
 * @since 2.0.1 removed basic class in module settings as it could be added via markup 2022-02-26
 * @since 2.0.2 fixed bug: remove Markdown Linktags from alt-Attribute 2022-03-23
 * @since 2.0.3 removed Textformatter for description. Apply via image field setting 2023-02-08
 * @since 2.0.4 update summary, settings decription and notes 2023-03-23
 * @since 2.0.5 added ProcessWire namespace 2023-08-02
 * @since 2.0.6 added hookable function to manipulate the page object where to retrieve the image from 2023-08-16
 * @since 2.0.7 added option to enable / disable removing placeholders if the image could not be found 2024-02-23
 * @since 2.0.8 added function renderMarkup(), assignImageProperties() for better external usage 2024-05-01
 * @since 2.0.9 multi instance support 2024-05-01
 * @since 2.1.0 remove empty tags and attributes (title, class) from markup 2024-06-05
 * 
 */

#[\AllowDynamicProperties]
class TextformatterPageImages extends Textformatter implements ConfigurableModule {

	const DEFAULT_MARKUP = '<img class="{class}" src="{url}" alt="{alt}"/>';

	public static function getModuleInfo() {
		return array(
			'title' => 'Textformatter Page Images', 
			'version' => 210, 
			'author' => 'kixe',
			'summary' => __("Allows you to insert images in a text area by referencing them with tags in the following formats [[fieldName, number, class, page-ID]] or ![alt](fieldName, number, class, page-ID, instance). All Parameters are optional. Configurable markup for output and responsive width settings. Output hookable."),
			'href' => 'https://github.com/kixe/TextformatterPageImages'
		); 
	}

	static public function getDefaultConfig() {
		return array(
			'html' => '',
			'widthSmall' => 400,
			'widthMedium' => 800,
			'widthLarge' => 1200,
			'removeTags' => 1
		);
	}

	public function __construct() {
		foreach(self::getDefaultConfig() as $key => $value) {
			$this->$key = $value;
		}
	}

	/**
	 * hookable function to manipulate the page object where to pull the image from
	 * @param object Page
	 * @return object Page
	 *
	 */
	protected function ___getPage(Page $page) {
		return $page;
	}

	/**
	 * hookable function returns output markup
	 * @param Pageimage object with additional properties (class, index, urlSmall, urlMedium, urlLarge)
	 * @return string markup appended with linebreak
	 *
	 */
	public function ___wrapper(Pageimage $picture) {
		return $this->html? trim($this->html)."\n" : self::DEFAULT_MARKUP;
	}

	public function assignImageProperties(Pageimage $picture, $properties = []) {
		$defaultProperties = [
			'index' => 0,
			'class' => '',
			'alt' => ''
		];
		$properties = array_merge($defaultProperties, $properties);		
		// assign properties
		foreach ($properties as $key => $value) {
			$picture->set($key, $value);
		}
		if ($picture->description && !$picture->alt) $picture->set('alt', $picture->description);
		$picture->alt = strip_tags($picture->alt);

		// provide size variations
		$small = $picture->width($this->widthSmall);
		$picture->set('urlSmall', $small->url);
		$picture->set('urlThumb', $small->url);
		$medium = $picture->width($this->widthMedium);
		$picture->set('urlMedium', $medium->url);
		$large = $picture->width($this->widthLarge);
		$picture->set('urlLarge', $large->url);
	}

	public function renderMarkup($picture) {
		$replace = wirePopulateStringTags($this->wrapper($picture), $picture);  	
	   	$regex = [
	   		// remove empty tags / standalone copyright sign, pipe symbol, comma
	   		'/<((?!iframe|canvas)\w+)[^>]*>(?>[\p{Z}\p{C}]|<br\b[^>]*>|&(?:(?:nb|thin|zwnb|e[nm])sp|zwnj|copy|#xfeff|#xa0|#160|#65279);|(?R)|[Â©|\/,]+)*<\/\1>/',
	   		// remove empty title or class attributes
	   		'/\s*?(class|title)=(\'\s*?\'|"\s*?")/'
	   	];
	   	return preg_replace($regex, '', $replace);
	}

	public function formatValue(Page $page, Field $field, &$str) {
		if(strpos($str, '[[') === false && strpos($str, '![') === false) return; // check if we even need to perform a preg_match and exit if not (added by Ryan)

		$pattern = "~(\!\[([^\]]*)?\]\((?!https?:\/\/|\/)([a-zA-Z]+[\w]*)?(,)?([\d]*)?(,)?(-?[_a-zA-Z]+[\w@ -]*)?(,)?([\d]*)?(,)?(site|site-[a-z]+)?\))|(\[\[([^,\w\s@-])?([a-zA-Z]+[\w]*)?(,)?([\d]*)?(,)?(-?[_a-zA-Z]+[\w@ -]*)?(,)?([\d]*)?(,)?(site|site-[a-z]+)?\]\])~";


		if(preg_match_all($pattern, $str, $a, PREG_SET_ORDER)) {
			foreach($a as $m) {

				// check type: Markdown or TextformatterPageImage
				if (!empty($m[12])) $m = array_slice($m, 12, 11);
				else $m = array_slice($m, 1, 11);

				$instance = wire();

				// switch / load instance if provided and exists
				if (!empty($m[10])) {
					if (wire('config')->urls->site != "/$m[10]/") {	
						// already loaded?
						foreach (ProcessWire::getInstances() as $id => $pwi) {
							if ("/$m[10]/" == $pwi->config->urls->site) {
								$instance = $pwi;
								break;
							}
						}
						if ($instance == wire()) {
							try {
								$path = wire('config')->paths->root . "$m[10]/";
								$instance = new ProcessWire($path);
							} catch (\Throwable $e) {
								$class = get_class($e);
								$this->error("Failed to construct new ProcessWire instance from path $path\nCatched $class: " . $e->getMessage(), wire('config')->debug? Notice::debug : Notice::logOnly);
							}
						}
					}
				}

				if ($m[8]) {
					$p = $instance->pages->get((int)$m[8]);
					if (!$p->id) continue;
				} else {
					$p = $this->getPage($page);
				}

				if(!$p->fields->get('type=FieldtypeImage')) return;
		   		$f = $m[2]?$m[2]:$p->fields->get('type=FieldtypeImage')->name;
		   		$picture = 0;

		   		if ($p->$f instanceof Pageimages) $picture = $p->get($f)->eq($m[4]?$m[4]-1:0);
		   		else if ($p->$f instanceof Pageimage) $picture = $p->get($f);
		   		else unset($picture);
		   		if (empty($picture)) {
		   			// remove placeholder if picture doesn't exists
		   			if ($this->removeTags) $str = str_replace($m[0], "", $str);
		   			continue;
		   		}
		   		else {
		   			$properties = [];
		   			$properties['index'] = $m[4]? $m[4]-1 : 0;
		   			$properties['class'] = $m[6]? $m[6] : '';
		   			$properties['alt'] = $m[1]? $m[1] : '';
		   			$this->assignImageProperties($picture, $properties);

		   			// error if wrapper() is hooked and returned array (outdated)
		   			$hooked = $this->wire('hooks')->isHooked('TextformatterPageImages::wrapper()');
		   			if ($hooked && is_array($this->wrapper($picture))) throw new WireException('Modul Version has changed. Expected string as return value of function wrapper(). Please update your hook.');
	   				$str = str_replace($m[0], $this->renderMarkup($picture), $str);
		   		}
		   	}
		}
	}

	/**
	 * module settings
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {

		$fields = new InputfieldWrapper();
		$defaults = self::getDefaultConfig();
		$data = array_merge($defaults, $data);

		$f = wire('modules')->get('InputfieldText'); 
		$f->attr('name', 'html');
		$f->label = __('HTML'); 
		$f->description = __("Custom Markup used for output. Any `PageImage` property surrounded by curled brackets will be replaced by the related value. If the description property contains markup (e.g. applied via textformatter of the image field) use property `\$alt` for attribute 'alt' instead of property `\$description` to get same content with stripped tags. Alternatively different content for the 'alt' attribute may be applied via Markdown syntax or via hook in to the PageImage instance.");
		$f->notes = __("Additional PageImage properties: `\$class`, `\$index`, `\$urlSmall`, `\$urlMedium`, `\$urlLarge`.");
		$f->placeholder = self::DEFAULT_MARKUP;
		$f->value = $data['html'];
		$fields->add($f);

		$f = wire('modules')->get('InputfieldCheckbox');
		$f->label = __('Remove placeholders');
		$f->description = __("Remove placeholders including surrounding tags if the image could not be found.");
		$f->notes = __("Should be unchecked if another Textformatter uses the same opening and closing tags. E.g. TextformatterHannaCode.");
		$f->attr('name', 'removeTags');
		if ($data['removeTags']) $f->attr('checked', 'checked');
		$f->columnWidth = 100;
		$fields->add($f);

		$f = wire('modules')->get('InputfieldInteger'); 
		$f->attr('name', 'widthSmall');
		$f->columnWidth = 33;
		$f->label = __('Width set to property $urlSmall'); 
		$f->value = $data['widthSmall'];
		$fields->add($f);

		$f = wire('modules')->get('InputfieldInteger'); 
		$f->attr('name', 'widthMedium');
		$f->columnWidth = 34;
		$f->label = __('Width set to property $urlMedium'); 
		$f->value = $data['widthMedium'];
		$fields->add($f);

		$f = wire('modules')->get('InputfieldInteger'); 
		$f->attr('name', 'widthLarge');
		$f->columnWidth = 33;
		$f->label = __('Width set to property $urlLarge'); 
		$f->value = $data['widthLarge'];
		$fields->add($f);

		return $fields;
	}
}